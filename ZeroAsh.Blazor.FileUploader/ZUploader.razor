@using Microsoft.AspNetCore.Components.Forms
@inject UploaderEventInitializer Initializer
@implements IAsyncDisposable

<div class="upload-container" @ref="_container">
    <label for="upload">
        <div class="upload">
            @ChildContent
            <InputFile id="upload" @ref="_uploader"
                       OnChange="OnChange"
                       AdditionalAttributes="@AdditionalAttributes"/>
        </div>
    </label>
</div>

@code {
    [Parameter] public EventCallback<InputFileChangeEventArgs> OnChange { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    [Parameter] public Dictionary<string, object> AdditionalAttributes { get; set; } = [];
    
    private InputFile? _uploader;
    private ElementReference _container;

    private BindingReference? _reference = null; 
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _reference = await Initializer
                .InitUploadArea(_container, _uploader?.Element ?? throw new NullReferenceException());
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_reference.HasValue) await _reference.Value.DisposeAsync();
    }

}